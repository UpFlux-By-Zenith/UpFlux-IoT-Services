name: UpFlux Monitoring Service Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'UpFlux.Monitoring.Service/**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'
    
    # Configure GitHub Packages as a NuGet source
    - name: Configure GitHub Packages NuGet Source
      run: |
        dotnet nuget add source "https://nuget.pkg.github.com/UpFlux-By-Zenith/index.json" \
          --name "github" \
          --username "PatrickOrjieh" \
          --password "${{ secrets.MY_GITHUB_PAT }}" \
          --store-password-in-clear-text

    # Install dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sysstat fakeroot dpkg-dev nuget tar

    # Read version from version.txt
    - name: Read Version from version.txt
      id: version
      run: |
        if [ -f ./UpFlux.Monitoring.Service/version.txt ]; then
          version=$(cat ./UpFlux.Monitoring.Service/version.txt)
        else
          version="1.0.0"  # Default starting version
        fi
        echo "version=$version" >> $GITHUB_ENV

    # Restore dependencies and build the service
    - name: Restore and Build Service
      run: dotnet publish ./UpFlux.Monitoring.Service/UpFlux.Monitoring.Service/UpFlux.Monitoring.Service.csproj -r linux-arm -c Release -o ./publish --self-contained true

    # Create the Debian package directory structure
    - name: Prepare Debian package structure
      run: |
        mkdir -p debian/package/DEBIAN
        mkdir -p debian/package/opt/upflux-monitoring-service
        mkdir -p debian/package/etc/systemd/system/
        mkdir -p debian/package/var/log/upflux/

        # Copy the application files
        cp -r ./publish/* debian/package/opt/upflux-monitoring-service/

    # Create systemd service file
    - name: Create systemd service file
      run: |
        cat <<EOF > debian/package/etc/systemd/system/upflux-monitoring.service
        [Unit]
        Description=UpFlux Monitoring Service
        After=network.target

        [Service]
        Type=simple
        ExecStart=/opt/upflux-monitoring-service/UpFlux.Monitoring.Service
        WorkingDirectory=/opt/upflux-monitoring-service
        StandardOutput=append:/var/log/upflux/upflux-monitoring-service.log
        StandardError=append:/var/log/upflux/upflux-monitoring-service-error.log
        Restart=always
        User=root

        [Install]
        WantedBy=multi-user.target
        EOF

    # Create the DEBIAN control file
    - name: Create Debian control file
      run: |
        cat <<EOF > debian/package/DEBIAN/control
        Package: upflux-monitoring-service
        Version: ${{ env.version }}
        Section: base
        Priority: optional
        Architecture: armhf
        Essential: no
        Maintainer: Patrick Orjieh <orjiehpatrick@gmail.com>
        Depends: python3, python3-rpi.gpio
        Description: UpFlux Monitoring Service
        EOF

    # Create the postinst script
    - name: Create postinst script
      run: |
        cat <<EOF > debian/package/DEBIAN/postinst
        #!/bin/bash
        set -e

        # Variables
        LOG_DIR="/var/log/upflux"
        DEVICE_UUID_CONF="/etc/upflux/device_uuid.conf"
        APPSETTINGS="/opt/upflux-monitoring-service/appsettings.json"

        # Create the log directory if it doesn't exist
        if [ ! -d "\$LOG_DIR" ]; then
          echo "Creating log directory: \$LOG_DIR"
          mkdir -p "\$LOG_DIR"
          chmod 755 "\$LOG_DIR"
        fi

        # Read device UUID from configuration file and update appsettings.json
        if [ -f "\$DEVICE_UUID_CONF" ]; then
          DEVICE_UUID=\$(cat "\$DEVICE_UUID_CONF")
          if [ -n "\$DEVICE_UUID" ]; then
            echo "Setting DeviceUuid to \$DEVICE_UUID in appsettings.json"
            # Replace only the value of "DeviceUuid" in appsettings.json
            sed -i "s|\"DeviceUuid\": \".*\"|\"DeviceUuid\": \"\$DEVICE_UUID\"|g" "\$APPSETTINGS"
          else
            echo "Warning: Device UUID is empty in \$DEVICE_UUID_CONF"
          fi
        else
          echo "Warning: Device UUID configuration file \$DEVICE_UUID_CONF not found. Using default placeholder."
        fi

        # Set permissions on the executable
        chmod +x /opt/upflux-monitoring-service/UpFlux.Monitoring.Service

        # Set permissions on the sensors_script directory
        chmod -R 755 /opt/upflux-monitoring-service/sensors_script

        # Set permissions on the Python sensor scripts
        chmod +x /opt/upflux-monitoring-service/sensors_script/*

        # Reload systemd daemon
        systemctl daemon-reload

        # Restart the service on upgrade
        if [ "\$1" = "configure" ] && [ -n "\$2" ]; then
          # Upgrading
          systemctl restart upflux-monitoring.service
        else
          # New installation
          systemctl enable upflux-monitoring.service
          systemctl start upflux-monitoring.service
        fi

        exit 0
        EOF
        chmod 755 debian/package/DEBIAN/postinst

    # Create the prerm script
    - name: Create prerm script
      run: |
        cat <<EOF > debian/package/DEBIAN/prerm
        #!/bin/bash
        set -e

        # Stop and disable the service
        systemctl stop upflux-monitoring.service || true
        systemctl disable upflux-monitoring.service || true

        exit 0
        EOF
        chmod 755 debian/package/DEBIAN/prerm

    # Create the postrm script
    - name: Create postrm script
      run: |
        cat <<EOF > debian/package/DEBIAN/postrm
        #!/bin/bash
        set -e

        if [ "\$1" = "purge" ]; then
          # Remove the service file
          rm -f /etc/systemd/system/upflux-monitoring.service

          # Remove application files
          rm -rf /opt/upflux-monitoring-service

          # Remove log directory
          # rm -rf /var/log/upflux/

          systemctl daemon-reload
        fi

        exit 0
        EOF
        chmod 755 debian/package/DEBIAN/postrm

    # Build the Debian package with gzip compression
    - name: Build Debian package with gzip compression
      run: |
        cd debian/package
        tar --format=gnu -czf control.tar.gz -C DEBIAN .
        tar --format=gnu -czf data.tar.gz -C . opt etc var
        echo "2.0" > debian-binary
        ar rcs upflux-monitoring-service_${{ env.version }}_armhf.deb debian-binary control.tar.gz data.tar.gz
        mv upflux-monitoring-service_${{ env.version }}_armhf.deb ../../upflux-monitoring-service_${{ env.version }}_armhf.deb

    # Create .nuspec file
    - name: Create .nuspec file
      run: |
        cat <<EOF > UpFlux.Monitoring.Service.nuspec
        <?xml version="1.0"?>
        <package>
          <metadata>
            <id>UpFlux.Monitoring.Service</id>
            <version>${{ env.version }}</version>
            <authors>Patrick Orjieh</authors>
            <owners>Patrick Orjieh</owners>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <description>UpFlux Monitoring Service Debian Package</description>
            <tags>UpFlux Monitoring Service Debian Package</tags>
          </metadata>
          <files>
            <file src="upflux-monitoring-service_${{ env.version }}_armhf.deb" target="content" />
          </files>
        </package>
        EOF

    # Package the .deb into a NuGet package
    - name: Create NuGet package
      run: nuget pack UpFlux.Monitoring.Service.nuspec

    # Conditionally publish based on whether it's an automatic trigger or manual
    - name: Publish NuGet Package to GitHub Packages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Publishing NuGet package to GitHub Packages..."
        dotnet nuget push UpFlux.Monitoring.Service.${{ env.version }}.nupkg --api-key ${{ secrets.MY_GITHUB_PAT }} --source "https://nuget.pkg.github.com/UpFlux-By-Zenith/index.json"

    - name: Upload NuGet Package Artifact
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v3
      with:
        name: upflux-monitoring-service-nuget-package
        path: UpFlux.Monitoring.Service.${{ env.version }}.nupkg
